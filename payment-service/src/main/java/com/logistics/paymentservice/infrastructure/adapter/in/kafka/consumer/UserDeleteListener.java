package com.logistics.paymentservice.infrastructure.adapter.in.kafka.consumer;

import com.logistics.events.UserEvent;
import com.logistics.paymentservice.infrastructure.adapter.out.database.entity.UserBalanceEntity;
import com.logistics.paymentservice.infrastructure.adapter.out.database.repository.BalanceRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;

@Slf4j
@Component
@RequiredArgsConstructor
public class UserDeleteListener {

    private final BalanceRepository balanceRepository;

    @KafkaListener(
            topics = "user-delete",
            groupId = "payment-service-group",
            containerFactory = "kafkaListenerContainerFactory"
    )
    public void handleUserDelete(UserEvent event) {
        log.info("üì• –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–¥—ñ—é –ø—Ä–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {}", event.userId());

        boolean userExists = balanceRepository.findByUserId(event.userId()).isPresent();

        if (userExists) {
            UserBalanceEntity userBalanceEntity = balanceRepository.findByUserId(event.userId()).get();
            balanceRepository.delete(userBalanceEntity);
            log.warn("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ! {}", event.userId());
        }

        log.warn("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–∞–Ω–∏–º –∞–π–¥—ñ –Ω–µ —ñ—Å–Ω—É—î {}", event.userId());
    }
}
